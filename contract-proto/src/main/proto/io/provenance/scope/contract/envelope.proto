syntax = "proto3";

package io.provenance.scope.contract;

option java_package = "io.provenance.scope.contract.proto";
option java_outer_classname = "Envelopes";

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "io/provenance/scope/contract/contract.proto";
import "io/provenance/scope/contract/common.proto";
import "io/provenance/scope/contract/specification.proto";
import "io/provenance/scope/contract/public_key.proto";
import "io/provenance/scope/contract/util.proto";

message EnvelopeState {
    Envelope input = 1;
    Envelope result = 2;
}

message Envelope {
    // ref contains
    // 1) the scope of the object being modified on blockchain.
    // 2) the uuid of the contract execution.
    // 3) the hash of the contract instance that has been executed.
    ProvenanceReference ref = 1;

    // The executed contract.
    Contract contract = 2;

    // Signatures for the contract.
    repeated Signature signatures = 3;

    reserved 4;

    // Unique identifier for determining contract/group execution instance
    UUID execution_uuid = 5;
    // Unique identifier for determining previous execution instance
    UUID prev_execution_uuid = 6;

    // When a contract execution is considered stale and expired
    google.protobuf.Timestamp expiration_time = 7;

    // Scope snapshot for executing
    google.protobuf.Any scope = 8;

    Status status = 9;

    enum Status {
        CREATED = 0 [(description) = "Envelope created."];
        FRAGMENT = 1 [(description) = "Envelope sent to other parties, awaiting responses."];
        INBOX = 2 [(description) = "Envelope received."];
        EXECUTED = 3 [(description) = "Envelope executed by non-invoker."];
        OUTBOX = 4 [(description) = "Envelope response sent from non-invoker to invoker."];
        SIGNED = 5 [(description) = "Envelope is complete with all signatures."];
        CHAINCODE = 6 [(description) = "Envelope has been sent to chaincode."];
        INDEX = 7 [(description) = "Envelope has been returned from chaincode."];
        COMPLETE = 8 [(description) = "Envelope has been completed."];
        ERROR = 11 [(description) = "Envelope is in error state."];
    }

    UUID scope_spec_uuid = 10;

    bool new_scope = 11;
    bool new_session = 12;

    bool main_net = 13;

    repeated PublicKey data_access = 14;
}

message EnvelopeEvent {
    reserved 1;
    reserved 2;

    string classname = 3;

    Envelope envelope = 4;
    EnvelopeError error = 5;

    EventType event = 6;

    Action action = 7;

    SigningAndEncryptionPublicKeys public_key = 8;

    enum EventType {
        UNUSED_TYPE = 0;
        ENVELOPE_REQUEST = 1;
        ENVELOPE_RESPONSE = 2;
        ENVELOPE_ERROR = 3;
        ENVELOPE_MAILBOX_OUTBOUND = 4;
        ENVELOPE_ACCEPTED = 5;
        ENVELOPE_EXECUTION_ERROR = 6;
    }

    enum Action {
        UNUSED_ACTION = 0;
        ACK = 1;
        REJECT = 2;
        EXECUTE = 3;
        EXECUTE_FRAGMENT = 4;
        HEARTBEAT = 5;
        CONNECT = 6;
    }

    google.protobuf.Timestamp timestamp = 99;
}

message EnvelopeError {
    UUID uuid = 1;
    UUID session_uuid = 2;
    UUID execution_uuid = 3;

    Type type = 4;
    string message = 5;
    google.protobuf.Timestamp read_time = 6;
    UUID scope_uuid = 7;

    Envelope envelope = 8;

    enum Type {
        NO_ERROR_TYPE = 0;
        CONTRACT_WHITELIST = 1;
        TTL_TIMEOUT = 2;
        CC_INVOCATION = 3;
        CONTRACT_INVOCATION = 4;
        CONTRACT_CANCELLED = 5;
        CONTRACT_REJECTED = 6;
        PUBLIC_KEY_CHECK = 7;
    }

    AuditFields audit_fields = 99;
}

extend google.protobuf.EnumValueOptions {
    string description = 65533;
}
